/**
 * Copyright (c) <%= new Date().getFullYear(); %>, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { IdentifiableComponentInterface } from "@wso2is/core/models";
import React, { FunctionComponent, ReactElement } from "react";

<% if (routing) { %>
import { Route, Link } from 'react-router-dom';
<% } %>

<% if (hasStyles) {
   if (styledModule && styledModule !== 'styled-jsx') {
    var wrapper = 'Styled' + className;
    var extras = '';
  %>
  import styled from '<%= styledModule %>';
  <% } else {
    var wrapper = 'div';
    var extras = globalCss ? '' : " className={styles['container']}";
  %>
  <%- style !== 'styled-jsx' ? globalCss ? `import './${fileName}.${style}';` : `import styles from './${fileName}.module.${style}';`: '' %>
  <% }
} else {
    var wrapper = 'div';
    var extras = '';
} %>

/**
 * Interface for the <%= className %> prop-types.
 * FIXME: Convert this type to an interface if more props need to be added.
 * TODO: Remove the `FIXME` and `TODO` comments once the component is ready to be checked in to VCS.
 */
export type <%= className %>PropsInterface = IdentifiableComponentInterface;

<% if (styledModule && styledModule !== 'styled-jsx') { %>
const Styled<%= className %> = styled.div`
  color: pink;
`;
<% }%>

/**
 * <%= className %> component.
 *
 * @param props - Props injected to the component.
 * @returns Functional component.
 */
export const <%= className %>: FunctionComponent<<%= className %>PropsInterface> = (
    props: <%= className %>PropsInterface
): ReactElement => {

    const {
        "data-componentid": componentId
    } = props;

    return (
        <<%= wrapper %><%- extras %> data-componentid={ componentId }>
        <% if (styledModule === 'styled-jsx') { %><style jsx>{`div { color: pink; }`}</style><% } %>
        <h1>Welcome to <%= className %>!</h1>
        <% if (routing) { %>
            <ul>
            <li><Link to="/"><%= name %> root</Link></li>
            </ul>
            <Route path="/" element={<div>This is the <%= name %> root route.</div>} />
        <% } %>
        </<%= wrapper %>>
    );
};
